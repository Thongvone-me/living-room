
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  user_id: 'user_id',
  first_name: 'first_name',
  last_name: 'last_name',
  gender: 'gender',
  role: 'role',
  password: 'password',
  email: 'email',
  phone: 'phone',
  profile: 'profile',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.TenantScalarFieldEnum = {
  tenant_id: 'tenant_id',
  first_name: 'first_name',
  last_name: 'last_name',
  gender: 'gender',
  email: 'email',
  phone: 'phone',
  dob: 'dob',
  profile: 'profile',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.RoomTypeScalarFieldEnum = {
  roomtype_id: 'roomtype_id',
  name: 'name',
  description: 'description',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.RoomScalarFieldEnum = {
  room_id: 'room_id',
  room_number: 'room_number',
  floor: 'floor',
  roomtype_id: 'roomtype_id',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.RentalContractScalarFieldEnum = {
  rentalcontract_id: 'rentalcontract_id',
  tenant_id: 'tenant_id',
  room_id: 'room_id',
  start_date: 'start_date',
  end_date: 'end_date',
  rent_amount: 'rent_amount',
  deposit: 'deposit',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.BookingScalarFieldEnum = {
  booking_id: 'booking_id',
  tenant_id: 'tenant_id',
  room_id: 'room_id',
  booking_date: 'booking_date',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.StayScalarFieldEnum = {
  stay_id: 'stay_id',
  tenant_id: 'tenant_id',
  room_id: 'room_id',
  check_in: 'check_in',
  check_out: 'check_out',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PaymentScalarFieldEnum = {
  payment_id: 'payment_id',
  tenant_id: 'tenant_id',
  user_id: 'user_id',
  stay_id: 'stay_id',
  amount: 'amount',
  payment_date: 'payment_date',
  method: 'method',
  status: 'status'
};

exports.Prisma.NotificationScalarFieldEnum = {
  notification_id: 'notification_id',
  tenant_id: 'tenant_id',
  user_id: 'user_id',
  message: 'message',
  is_read: 'is_read',
  created_at: 'created_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  first_name: 'first_name',
  last_name: 'last_name',
  password: 'password',
  email: 'email',
  phone: 'phone',
  profile: 'profile'
};

exports.Prisma.TenantOrderByRelevanceFieldEnum = {
  first_name: 'first_name',
  last_name: 'last_name',
  email: 'email',
  phone: 'phone',
  profile: 'profile'
};

exports.Prisma.RoomTypeOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description'
};

exports.Prisma.RoomOrderByRelevanceFieldEnum = {
  room_number: 'room_number'
};

exports.Prisma.NotificationOrderByRelevanceFieldEnum = {
  message: 'message'
};
exports.Gender = exports.$Enums.Gender = {
  male: 'male',
  female: 'female'
};

exports.UserRole = exports.$Enums.UserRole = {
  admin: 'admin',
  staff: 'staff'
};

exports.RoomStatus = exports.$Enums.RoomStatus = {
  available: 'available',
  occupied: 'occupied',
  reserved: 'reserved'
};

exports.ContractStatus = exports.$Enums.ContractStatus = {
  active: 'active',
  expired: 'expired',
  terminated: 'terminated'
};

exports.BookingStatus = exports.$Enums.BookingStatus = {
  pending: 'pending',
  confirmed: 'confirmed',
  cancelled: 'cancelled'
};

exports.StayStatus = exports.$Enums.StayStatus = {
  ongoing: 'ongoing',
  completed: 'completed'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  cash: 'cash',
  credit_card: 'credit_card'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  pending: 'pending',
  paid: 'paid',
  failed: 'failed'
};

exports.Prisma.ModelName = {
  User: 'User',
  Tenant: 'Tenant',
  RoomType: 'RoomType',
  Room: 'Room',
  RentalContract: 'RentalContract',
  Booking: 'Booking',
  Stay: 'Stay',
  Payment: 'Payment',
  Notification: 'Notification'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
